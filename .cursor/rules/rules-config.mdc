---
description: 
globs: *config*,*.config*
alwaysApply: false
---
# Configuration Rules - ZK-Vault

## Configuration Overview
ZK-Vault uses **Vite 5.0** as build tool, **Tailwind CSS v4** for styling, **PostCSS** for CSS processing, and **TypeScript 5.3+** with strict configuration.

## Build Configuration (Vite)

### Vite Configuration Pattern (From vite.config.ts)
```typescript
// vite.config.ts
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import tailwindcss from '@tailwindcss/vite'
import { resolve } from 'path'

export default defineConfig({
  plugins: [
    vue({
      template: {
        compilerOptions: {
          isCustomElement: tag => tag.startsWith('ion-')
        }
      }
    }),
    tailwindcss() // Tailwind CSS v4 Vite plugin
  ],

  resolve: {
    alias: {
      '@': resolve(__dirname, './src'),
      '@/components': resolve(__dirname, './src/components'),
      '@/services': resolve(__dirname, './src/services'),
      '@/store': resolve(__dirname, './src/store'),
      '@/composables': resolve(__dirname, './src/composables'),
      '@/utils': resolve(__dirname, './src/utils'),
      '@/styles': resolve(__dirname, './src/styles'),
      '@/workers': resolve(__dirname, './src/workers'),
      '@/views': resolve(__dirname, './src/views'),
      // Monorepo package aliases
      '@zk-vault/shared': resolve(__dirname, '../shared/dist'),
      '@zk-vault/crypto': resolve(__dirname, '../crypto/dist')
    }
  },

  css: {
    postcss: './postcss.config.mjs',
    devSourcemap: true
  },

  build: {
    target: 'es2020',
    sourcemap: true,
    cssCodeSplit: true,
    rollupOptions: {
      output: {
        manualChunks: {
          vendor: ['vue', 'vue-router', 'pinia'],
          firebase: ['firebase/app', 'firebase/auth', 'firebase/firestore'],
          crypto: ['@zk-vault/crypto'],
          shared: ['@zk-vault/shared']
        }
      }
    }
  },

  server: {
    port: 3000,
    open: true,
    cors: true,
    headers: {
      'X-Frame-Options': 'DENY',
      'X-Content-Type-Options': 'nosniff',
      'X-XSS-Protection': '1; mode=block'
    }
  }
})
```

### Import Alias Usage Rules
```typescript
// CORRECT: Use configured aliases
import Component from '@/components/ComponentName.vue'
import { useStore } from '@/store/auth'
import { encrypt } from '@/utils/crypto'
import { ApiService } from '@/services/api'
import '@/styles/components/component-name.css'

// WRONG: Relative imports for aliased paths
import Component from '../../../components/ComponentName.vue'
import { useStore } from '../../store/auth'
```

## TypeScript Configuration

### TSConfig Setup (From tsconfig.json)
```json
{
  "extends": "../../tools/config/tsconfig.base.json",
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2022", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "preserve",
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"],
      "@/components/*": ["./src/components/*"],
      "@/services/*": ["./src/services/*"],
      "@/store/*": ["./src/store/*"],
      "@/composables/*": ["./src/composables/*"],
      "@/utils/*": ["./src/utils/*"]
    },
    "types": ["vite/client", "node"]
  },
  "include": [
    "src/**/*.ts",
    "src/**/*.tsx", 
    "src/**/*.vue",
    "src/**/*.d.ts"
  ],
  "exclude": ["node_modules", "dist"],
  "references": [
    { "path": "../shared" },
    { "path": "../crypto" }
  ]
}
```

### TypeScript Configuration Rules
- **Target**: ES2022 for modern browser support
- **Module**: ESNext with bundler resolution for Vite
- **Strict Mode**: Always enabled with additional checks
- **Path Mapping**: Must match Vite alias configuration
- **References**: Use for monorepo TypeScript project references

## Tailwind CSS v4 Configuration

### Tailwind Config Pattern (From tailwind.config.js)
```javascript
// tailwind.config.js
export default {
  content: {
    files: [
      "./src/**/*.{js,ts,jsx,tsx,vue,html}",
      "./public/index.html",
      "../shared/src/**/*.{js,ts,jsx,tsx,vue}"
    ]
  },

  plugins: [
    require("tailwindcss-animate"),
    require("@tailwindcss/container-queries")
  ],

  theme: {
    extend: {
      colors: {
        primary: {
          50: 'rgb(var(--color-primary-50) / <alpha-value>)',
          100: 'rgb(var(--color-primary-100) / <alpha-value>)',
          // ... full color scale
        },
        security: {
          safe: 'rgb(var(--color-security-safe) / <alpha-value>)',
          warning: 'rgb(var(--color-security-warning) / <alpha-value>)',
          danger: 'rgb(var(--color-security-danger) / <alpha-value>)',
          critical: 'rgb(var(--color-security-critical) / <alpha-value>)'
        }
      },

      animation: {
        'fade-in': 'fadeIn 0.2s ease-out',
        'slide-up': 'slideUp 0.25s ease-out',
        'security-pulse': 'securityPulse 2s ease-in-out infinite'
      },

      keyframes: {
        fadeIn: {
          '0%': { opacity: '0' },
          '100%': { opacity: '1' }
        },
        slideUp: {
          '0%': { transform: 'translateY(8px)', opacity: '0' },
          '100%': { transform: 'translateY(0)', opacity: '1' }
        }
      }
    }
  },

  future: {
    hoverOnlyWhenSupported: true
  }
}
```

### Tailwind v4 Integration Rules
- **Use CSS Variables**: `rgb(var(--color-name) / <alpha-value>)` pattern
- **Custom Animations**: Define in config, use in CSS classes
- **Container Queries**: Use for component-level responsive design
- **Content Sources**: Include all template files and shared packages

## PostCSS Configuration

### PostCSS Setup (From postcss.config.mjs)
```javascript
// postcss.config.mjs
export default {
  plugins: {
    '@tailwindcss/postcss': {},
    'postcss-import': {},
    'postcss-nested': {},
    'postcss-preset-env': {
      stage: 2,
      features: {
        'nesting-rules': false // Handled by postcss-nested
      }
    },
    'cssnano': process.env.NODE_ENV === 'production' ? {
      preset: ['default', {
        discardComments: { removeAll: true },
        normalizeWhitespace: false
      }]
    } : false
  }
}
```

### PostCSS Processing Order
1. **postcss-import**: Handle @import statements
2. **@tailwindcss/postcss**: Process Tailwind CSS v4
3. **postcss-nested**: Handle nested CSS rules
4. **postcss-preset-env**: Modern CSS features
5. **cssnano**: Production minification

## Package.json Configuration Rules

### Monorepo Package Structure
```json
{
  "name": "@zk-vault/web-app",
  "version": "0.1.0",
  "type": "module",
  "private": true,
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "build:production": "NODE_ENV=production vite build",
    "preview": "vite preview",
    "type-check": "vue-tsc --noEmit",
    "lint": "eslint src --ext .vue,.js,.jsx,.cjs,.mjs,.ts,.tsx,.cts,.mts --fix",
    "lint:css": "stylelint \"src/**/*.{css,vue}\" --fix",
    "test": "vitest",
    "test:coverage": "jest --coverage"
  },
  "dependencies": {
    "vue": "^3.3.8",
    "vue-router": "^4.2.5",
    "pinia": "^2.1.7",
    "firebase": "^10.7.0",
    "tailwindcss": "^4.1.0",
    "@zk-vault/crypto": "file:../crypto",
    "@zk-vault/shared": "file:../shared"
  }
}
```

### Package.json Rules
- **Type**: "module" for ES modules
- **Private**: true for monorepo packages
- **Scripts**: Consistent naming across packages
- **Dependencies**: Use workspace references for internal packages
- **Version**: Semantic versioning

## Environment Configuration

### Environment Variables Pattern
```bash
# .env (committed - non-sensitive defaults)
VITE_APP_NAME=ZK-Vault
VITE_APP_VERSION=1.0.0
VITE_API_URL=http://localhost:3000/api

# .env.local (never commit - sensitive/local values)
VITE_FIREBASE_API_KEY=your-api-key
VITE_FIREBASE_AUTH_DOMAIN=your-project.firebaseapp.com
VITE_FIREBASE_PROJECT_ID=your-project-id
VITE_FIREBASE_STORAGE_BUCKET=your-project.appspot.com
VITE_FIREBASE_MESSAGING_SENDER_ID=123456789
VITE_FIREBASE_APP_ID=1:123456789:web:abcdef

# .env.production (production overrides)
VITE_API_URL=https://api.zk-vault.com
```

### Environment Usage Rules
```typescript
// CORRECT: Use import.meta.env for Vite
const apiKey = import.meta.env.VITE_FIREBASE_API_KEY
const isDev = import.meta.env.DEV
const isProd = import.meta.env.PROD

// WRONG: Don't use process.env in Vite
const apiKey = process.env.VITE_FIREBASE_API_KEY
```

## ESLint Configuration

### ESLint Setup Pattern
```javascript
// .eslintrc.cjs
module.exports = {
  extends: [
    '@vue/eslint-config-typescript',
    '@vue/eslint-config-prettier',
    'plugin:vue/vue3-recommended'
  ],
  parserOptions: {
    ecmaVersion: 'latest',
    sourceType: 'module'
  },
  rules: {
    'vue/multi-word-component-names': 'off',
    'vue/no-unused-vars': 'error',
    '@typescript-eslint/no-unused-vars': 'error',
    '@typescript-eslint/explicit-function-return-type': 'warn'
  }
}
```

## Stylelint Configuration

### Stylelint Setup for CSS Architecture
```json
// .stylelintrc.json
{
  "extends": [
    "stylelint-config-standard",
    "stylelint-config-tailwindcss"
  ],
  "rules": {
    "at-rule-no-unknown": [true, {
      "ignoreAtRules": ["tailwind", "apply", "variants", "responsive", "screen"]
    }],
    "declaration-block-no-duplicate-properties": true,
    "no-duplicate-selectors": true
  }
}
```

## Vitest Configuration

### Testing Configuration Pattern
```typescript
// vitest.config.ts
import { defineConfig } from 'vitest/config'
import vue from '@vitejs/plugin-vue'
import { resolve } from 'path'

export default defineConfig({
  plugins: [vue()],
  test: {
    environment: 'jsdom',
    globals: true,
    setupFiles: ['./vitest.setup.ts']
  },
  resolve: {
    alias: {
      '@': resolve(__dirname, './src')
    }
  }
})
```

## Configuration Best Practices

### Development vs Production
- **Development**: Source maps, verbose logging, emulator connections
- **Production**: Minification, compression, error reporting, analytics
- **Staging**: Production-like with debug capabilities

### Security Headers Configuration
```typescript
// In vite.config.ts server.headers
{
  'X-Frame-Options': 'DENY',
  'X-Content-Type-Options': 'nosniff', 
  'X-XSS-Protection': '1; mode=block',
  'Referrer-Policy': 'strict-origin-when-cross-origin'
}
```

### Performance Optimization
- **Code Splitting**: Manual chunks for vendor, Firebase, crypto
- **CSS Code Splitting**: Separate CSS chunks for better caching
- **Asset Optimization**: Proper naming and organization
- **Bundle Analysis**: Use rollup-plugin-visualizer

Remember: Configuration files should be consistent across the monorepo, use TypeScript for type safety, and prioritize security and performance optimization. 