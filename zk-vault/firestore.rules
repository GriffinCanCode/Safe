// Firestore Security Rules for ZK-Vault
// Implements zero-knowledge security principles with strict access controls

rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for authentication and authorization
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isValidUser() {
      return isAuthenticated() && request.auth.uid != null;
    }
    
    function isValidTimestamp(timestamp) {
      return timestamp is timestamp && timestamp <= request.time;
    }
    
    function hasValidSchema(data, requiredFields) {
      return data.keys().hasAll(requiredFields) &&
             data.keys().hasOnly(requiredFields.concat(['createdAt', 'updatedAt']));
    }
    
    // User profiles - users can only access their own data
    match /users/{userId} {
      allow read, write: if isOwner(userId) &&
                           hasValidSchema(resource.data, ['email', 'displayName', 'settings']);
      
      allow create: if isOwner(userId) &&
                      hasValidSchema(request.resource.data, ['email', 'displayName', 'settings']) &&
                      isValidTimestamp(request.resource.data.createdAt);
      
      allow update: if isOwner(userId) &&
                      isValidTimestamp(request.resource.data.updatedAt) &&
                      request.resource.data.createdAt == resource.data.createdAt;
    }
    
    // User settings - private to each user
    match /users/{userId}/settings/{settingId} {
      allow read, write: if isOwner(userId);
    }
    
    // Encrypted vault items - zero-knowledge architecture
    match /vaults/{userId}/items/{itemId} {
      allow read, write: if isOwner(userId) &&
                           hasValidSchema(resource.data, ['encryptedData', 'metadata', 'itemType']);
      
      allow create: if isOwner(userId) &&
                      hasValidSchema(request.resource.data, ['encryptedData', 'metadata', 'itemType']) &&
                      isValidTimestamp(request.resource.data.createdAt) &&
                      // Ensure encrypted data is properly structured
                      request.resource.data.encryptedData is map &&
                      request.resource.data.encryptedData.keys().hasAll(['iv', 'data', 'authTag']) &&
                      // Metadata should not contain sensitive information
                      request.resource.data.metadata is map &&
                      !request.resource.data.metadata.keys().hasAny(['password', 'secret', 'key']);
      
      allow update: if isOwner(userId) &&
                      isValidTimestamp(request.resource.data.updatedAt) &&
                      request.resource.data.createdAt == resource.data.createdAt &&
                      request.resource.data.itemType == resource.data.itemType;
    }
    
    // Vault metadata - non-sensitive vault information
    match /vaults/{userId}/metadata/{metadataId} {
      allow read, write: if isOwner(userId);
    }
    
    // Encrypted file references - for secure file storage
    match /files/{userId}/refs/{fileId} {
      allow read, write: if isOwner(userId) &&
                           // File references must include encrypted metadata
                           request.resource.data.keys().hasAll(['encryptedMetadata', 'storageRef', 'checksum']);
      
      allow create: if isOwner(userId) &&
                      isValidTimestamp(request.resource.data.createdAt);
    }
    
    // Security events - audit trail (read-only for users)
    match /security/{userId}/events/{eventId} {
      allow read: if isOwner(userId);
      allow write: if false; // Only server-side functions can write security events
    }
    
    // User sessions - for managing active sessions
    match /sessions/{userId}/active/{sessionId} {
      allow read, write: if isOwner(userId) &&
                           hasValidSchema(resource.data, ['deviceInfo', 'loginTime', 'lastActivity']);
      
      allow create: if isOwner(userId) &&
                      isValidTimestamp(request.resource.data.loginTime);
    }
    
    // Backup metadata - encrypted backup references
    match /backups/{userId}/metadata/{backupId} {
      allow read, write: if isOwner(userId);
    }
    
    // Shared vault invitations (if implementing sharing features)
    match /invitations/{invitationId} {
      allow read: if request.auth.email == resource.data.recipientEmail;
      allow write: if request.auth.uid == resource.data.senderUserId;
    }
    
    // Rate limiting collection (server-managed)
    match /rateLimit/{document=**} {
      allow read, write: if false; // Only server functions can manage rate limiting
    }
    
    // Analytics data (anonymized, server-managed)
    match /analytics/{document=**} {
      allow read, write: if false; // Only server functions can write analytics
    }
    
    // System configuration (admin only - managed server-side)
    match /system/{document=**} {
      allow read, write: if false; // Only admin functions can manage system config
    }
    
    // Catch-all: deny access to any other documents
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
